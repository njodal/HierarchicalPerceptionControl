general:
  name: Tests for ControlUnit.py

  tests:
    - test:
        call: test_create_control
        cases:
          - case:
              input:  [{type: PID, gains: [2.0, 1.0], key: PID1, debug: True}]
              output: PID1
          - case:
              input:  [{type: IncrementalPID, gains: [2.0, 1.0], key: I_PID1, debug: True}]
              output: I_PID1
          - case:
              input:  [{type: P, gain: 2.0, key: P1, debug: True}]
              output: P1
          - case:
              input:  [{type: PCU, g: 2.0, s: 3.0, key: PCU1, debug: True}]
              output: PCU1
          - case:
              input:  [{type: BangBang, bellow_value: 0, above_value: 1, key: BB1, debug: True}]
              output: BB1
          - case:
              input:  [{type: Lineal, gain: 2, input_bounds: [0, 10], key: L1, debug: True}]
              output: L1
          - case:
              input:  [{type: Fuzzy, file_name: tipping_control.yaml, key: FZ1, debug: True}]
              output: FZ1

    - test:
        call: test_control
        cases:
          - case:
              input:  [[[5.0, 0.0]], {type: IncrementalPID, gains: [3.0, 0.01, 1.0], bounds: [-2.0, 2.0], debug: False}]
              output: 2.0
          - case:
              input:  [[[5.0, 0.0], [5.0, 0.0]], {type: IncrementalPID, gains: [3.0, 1.0, 1.0], bounds: [-2.0, 2.0], debug: False}]
              output: 2.0
          - case:
              input:  [[[5.0, 0.0]], {type: AdaptiveP, gain: 0.1, learning_rate: 0.01, bounds: [-2.0, 2.0], debug: True}]
              output: 2.0

    - test:
        call: test_step_response
        desc: test how a given controller react to a given reference and disturbance values
        cases:
          - case:
              desc: Adaptive Proportional
              input: [ 5, 2, 500, 0.1, False, { type: AdaptiveP, gain: 3.0, learning_rate: 0.1, past_length: 50, decay_rate: 0.00001, bounds: [ -20.0, 20.0 ], debug: False } ]
              output: 5.0
          - case:
              desc: Proportional without disturbance, should reach target smoothly
              input: [ 5, 0, 200, 0.1, False, { type: P, gain: 1.0, bounds: [ -20.0, 20.0 ], debug: True } ]
              output: 4.99
          - case:
              desc:   Proportional with disturbance, should not reach target
              input:  [5, 2, 60, 0.1, False, {type: P, gain: 3.0, bounds: [-20.0, 20.0], debug: False}]
              output: 4.99
          - case:
              desc:   Incremental PID without disturbance
              input:  [1, 0, 100, 0.1, False, {type: IncrementalPID, gains: [3.0, 0.13, 3.0], bounds: [-20.0, 20.0], debug: False}]
              output: 5.0
          - case:
              desc:   Incremental PID with disturbance
              input:  [1, 2, 100, 0.1, False, {type: IncrementalPID, gains: [9.4, 1.0, 0.21], bounds: [-20.0, 20.0], debug: False}]
              output: 5.0
          - case:
              desc:   PID with disturbance
              input:  [5, 2, 500, 0.1, False, {type: PID, gains: [10.0, 94.0, 0.0], bounds: [-20.0, 20.0], debug: False}]
              output: 5.0
          - case:
              desc:   PCU with disturbance
              input:  [5, 2, 100, 0.1, False, {type: PCU, g: 8.0, s: 1.3, bounds: [-20.0, 20.0], debug: False}]
              output: 4.99

    - test:
        call: get_param
        cases:
          - case:
              input:  [{p1: 1, p2: kp}, p2, 1, {kp: 2}]
              output: 2
          - case:
              input:  [{p1: 1, p2: [kp, 1]}, p2, [], {kp: 2}]
              output: [2, 1]

    - test:
        call: test_deconvolution
        cases:
          - case:
              input:  [lineal2, 50, 0.001, 0.01, 0.01, 2, True]
              output: 0.0
